# -*- coding: utf-8 -*-
"""taller1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NK8g3kI8oHUGa457i7TDCqxu8pEJ3LV4

Vehicle constructor company System
"""

class Engine:
    """
    this class represent an engine and its characteristics

    Parameters:
      type_ (str): engine type
      power (int): engine power
      weight (float): engine weight
    """
    def __init__(self, type_: str, power: int, weight: float):
         self.type_ = type_
         self.power = power
         self.weight = weight

class Vehicle:
     """
     This is a generic class that represent a vehicle

     Parameters:
      type_ (str): vehicle type
      engine (Engine): engine used by the vehicle
      chassis (str): type of chassis used in the vehicle
      model (str): name of the vehicle
      year (int): year of manufacture

     funtions:
      calculate_gas_consumption(): calculates engine fuel consumption
     """
     def __init__(self, type_: str, engine: Engine, chassis: str, model: str, year: int):
         self.type_ = type_
         self.engine = engine
         self.chassis = chassis
         self.model = model
         self.year = year

     def calculate_gas_consumption(self) -> float:
         if self.chassis == 'A':
             return 1.1 * float(self.engine.power) + 0.2 * float(self.engine.weight) - 0.3
         elif self.chassis == 'B':
             return 1.1 * float(self.engine.power) + 0.2 * float(self.engine.weight) - 0.5

class Car(Vehicle):
     """
     this class represent a car
     """
     def __init__(self, type_, engine, chassis, model, year):
         super().__init__(type_, engine, chassis, model, year)

class Truck(Vehicle):
     """
     this class represent a truck
     """
     def __init__(self, type_, engine, chassis, model, year):
         super().__init__(type_, engine, chassis, model, year)

class Yacht(Vehicle):
     """
     this class represent a yacht
     """
     def __init__(self, type_, engine, chassis, model, year):
         super().__init__(type_, engine, chassis, model, year)

class Motorcycle (Vehicle):
     """
     this class represent a motorcycle
     """
     def __init__(self, type_, engine, chassis, model, year):
         super().__init__(type_, engine, chassis, model, year)


list_vehicles = []
list_engines = []

def new_engine():
    print("tipo de motor")
    engine_type = input()
    print("potencia del motor")
    engine_power = input()
    print("peso del motor")
    engine_weight = input()
    enginet = Engine(engine_type, engine_power, engine_weight)
    list_engines.append(enginet)
    return(enginet)


def new_vehicle():
    print("que tipo de vehiculo? car, truck, yacht, motorcycle")
    vehicle_type = input() #poner comprobacion
    if vehicle_type not in ["car", "truck", "yacht", "motorcycle"]:
      raise ValueError("tipo de vehiculo incorrecto")
    print("modelo")
    model = input()
    print("año")
    year = input()
    print("tipo de chasis (A o B)")
    chassis = input() #poner comprobacion
    if chassis not in ["A", "B"]:
      raise ValueError("tipo de chasis incorrecto")
    enginet = new_engine()

    if vehicle_type == "car":

      car = Car(vehicle_type, enginet, chassis, model, year)
      list_vehicles.append(car)

    elif vehicle_type == "truck":

      truck = Truck(vehicle_type, enginet, chassis, model, year)
      list_vehicles.append(truck)

    elif vehicle_type == "yacht":

      yacht = Yacht(vehicle_type, enginet, chassis, model, year)
      list_vehicles.append(yacht)

    elif vehicle_type == "motorcycle":

      bike = Motorcycle(vehicle_type, enginet, chassis, model, year)
      list_vehicles.append(bike)

def main():
    while True:
      print("que desa hacer? \n 1-añadir vehiculo \n 2-ver vehiculos \n 3-agregar motor \n 4-ver motores \n 0-salir")
      n = int(input())

      if n == 1:
        new_vehicle()

      elif n == 2:
        for elem in list_vehicles:
          print(f"-tipo de vehiculo: {elem.type_}, modelo: {elem.model}, chasis: {elem.chassis}, año: {elem.year}, tipo de motor: {elem.engine.type_}, potencia del motor: {elem.engine.power}, peso del motor: {elem.engine.weight}, consumo de combustible: {elem.calculate_gas_consumption()}")

      elif n == 3:
        new_engine()

      elif n == 4:
        for elem in list_engines:
          print(f"tipo de motor: {elem.type_}, potencia del motor: {elem.power}, peso del motor: {elem.weight}")

      elif n == 0:
        break

      else:
        print("seleccione una opcion correcta")

if __name__ == "__main__":
    main()